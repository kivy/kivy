<Label>:
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			texture: self.texture
			size: self.texture_size
			pos: int(self.center[0] - self.texture_size[0] / 2.), int(self.center[1] - self.texture_size[1] / 2.)

<Button,ToggleButton>:
	canvas:
		Color:
			rgb: self.color
		BorderImage:
			border: (16, 16, 16, 16)
			pos: self.pos
			size: self.size
			source: 'data/images/button.png' if self.state == 'normal' else 'data/images/button_pressed.png'
		Color:
			rgb: (1, 1 ,1)
		Rectangle:
			texture: self.texture
			size: self.texture_size
			pos: int(self.center_x - self.texture_size[0] / 2.), int(self.center_y - self.texture_size[1] / 2.)


<Slider>:
    canvas:
        Color:
            rgb: 1, 1, 1
		BorderImage:
			border: (0, 18, 0, 18) if self.orientation == 'horizontal' else (18, 0, 18, 0)
			pos: (self.x, self.center_y - 18) if self.orientation == 'horizontal' else (self.center_x - 18, self.y)
			size: (self.width, 37) if self.orientation == 'horizontal' else (37, self.height)
			source: 'data/images/slider%s_background.png' % self.orientation[0]
		Image:
			pos: (self.value_pos[0] - 16, self.center_y - 17) if self.orientation == 'horizontal' else (self.center_x - 16, self.value_pos[1] - 16)
			size: (32, 32)
			source: 'data/images/slider_cursor.png'

<Scatter>:
	canvas.before:
		PushMatrix
		MatrixInstruction:
			matrix: self.transform
	canvas.after:
		PopMatrix

<Image,AsyncImage>:
	canvas:
		Color:
			rgb: (1, 1, 1)
		Rectangle:
			texture: self.texture
			size: self.norm_image_size
			pos: self.center_x - self.norm_image_size[0] / 2., self.center_y - self.norm_image_size[1] / 2.


<FileSelector>:
    Label:
        size_hint: (1, None)
        height: 25
        text: root.path

    FileSelectorScrollview:
        size_hint: (1, 10)
        #controler: root
        files: root.files

    BoxLayout:
        orientation: 'horizontal'
        size_hint: (1, 1)
        height: 25
        Button:
            text: 'Ok'
            on_pressed: root.dispatch('on_select', root.selection)
        Button:
            text: 'Cancel'
            on_pressed: root.dispatch('on_cancel')

